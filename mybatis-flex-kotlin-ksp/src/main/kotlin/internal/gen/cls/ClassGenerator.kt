package com.mybatisflex.kotlin.ksp.internal.gen.cls

import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.mybatisflex.kotlin.ksp.internal.gen.TableDefGenerator
import com.mybatisflex.kotlin.ksp.internal.util.*
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec

/**
 * 生成的 TableDef 由 object 变为了 class ，仅在极特殊情况下需要使用构造器时，或完全兼容 Java 时的选择这个类。
 */
internal class ClassGenerator : TableDefGenerator {
    override val KSClassDeclaration.typeSpec: TypeSpec
        get() = classSpec()

    private val _instancePropertySpecs = ArrayList<PropertySpec>()

    override val instancePropertySpecs: List<PropertySpec>
        get() = _instancePropertySpecs

    private fun KSClassDeclaration.classSpec(): TypeSpec = TypeSpec.classBuilder(tableClassName).apply {
        val legalProperties = legalProperties

        addKdoc(
            """
            This file is automatically generated by the ksp of mybatis-flex, do not modify this file.
            """.trimIndent()
        )

        superclass(TABLE_DEF)
        addSuperclassConstructorParameter(
            """
            "$scheme", "$tableName"
            """.trimIndent()
        )

        addProperties(legalProperties.map {
            it.getPropertySpecBuilder().build()
        }.toList())
        addProperty(allColumnsBuilder.build())
        addProperty(getDefaultColumns(legalProperties).build())

        addType(companionObjectSpec())
    }.build()

    private fun KSClassDeclaration.companionObjectSpec(): TypeSpec = TypeSpec.companionObjectBuilder().apply {
        val generateClassName = ClassName("${packageName.asString()}.table", tableClassName)
        val instanceProperty = instanceProperty(generateClassName, "${generateClassName.simpleName}()").build()

        addProperty(instanceProperty)
        _instancePropertySpecs += instanceProperty
    }.build()
}