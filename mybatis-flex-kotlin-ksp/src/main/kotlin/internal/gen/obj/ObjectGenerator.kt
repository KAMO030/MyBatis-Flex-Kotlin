package com.mybatisflex.kotlin.ksp.internal.gen.obj

import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSPropertyDeclaration
import com.mybatisflex.kotlin.ksp.internal.gen.TableDefGenerator
import com.mybatisflex.kotlin.ksp.internal.util.*
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec

internal class ObjectGenerator : TableDefGenerator {
    private val _instancePropertySpecs = ArrayList<PropertySpec>()

    override val instancePropertySpecs: List<PropertySpec>
        get() = _instancePropertySpecs

    override val KSClassDeclaration.typeSpec: TypeSpec
        get() = TypeSpec.objectBuilder(tableClassName).apply {
            val tableClassName = tableClassName
            val generateClassName = ClassName("${packageName.asString()}.table", tableClassName)  // 将要生成的类的ClassName
            val allProperties = legalProperties
            val list = generateProperties(allProperties)
            val instanceProperty = instanceProperty(generateClassName).build()
            _instancePropertySpecs += instanceProperty

            addProperties(list)
            addProperty(allColumnsBuilder.build())
            addProperty(getDefaultColumns(allProperties).build())
            addKdoc(
                """
                    This file is automatically generated by the ksp of mybatis-flex, do not modify this file.
                    """.trimIndent()
            )
            superclass(TABLE_DEF)
            addSuperclassConstructorParameter(
                """
                    "$scheme", "$tableName"
                    """.trimIndent()
            )
            addProperty(instanceProperty)
        }.build()

    override fun generate(classDeclaration: KSClassDeclaration) {
        val tableClassName = classDeclaration.tableClassName
        val fileSpec = FileSpec.builder(
            "${classDeclaration.packageName.asString()}.table",
            tableClassName
        )

        val typeSpec = classDeclaration.typeSpec
        fileSpec.addType(typeSpec)
        fileSpec
            .suppressDefault()
            .build()
            .write()
    }

    private fun generateProperties(sequence: Sequence<KSPropertyDeclaration>): List<PropertySpec> = sequence.map {
        it.propertySpecBuilder.build()
    }.toList()

}